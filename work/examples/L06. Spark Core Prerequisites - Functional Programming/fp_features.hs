-- :load fp_features 
--
--
------------------------------------
--
-- 1. POLYMORPHISM
--
------------------------------------
--
------------------------------------
-- 1. myFst
------------------------------------
--
myFst :: a -> b -> a
myFst x y = x
--
------------------------------------
-- 2. mySnd
------------------------------------
--
mySnd:: a -> b -> b
mySnd x y = y
--
------------------------------------
-- 3. myTake
------------------------------------
--
myTake :: Int -> [a] -> [a]
myTake 0 xs = []
myTake n [] = []
myTake n (x:xs) = x : myTake (n-1) xs
--
------------------------------------
--
-- 2. HIGHER ORDER FUNCTIONS
--
------------------------------------
--
------------------------------------
-- 4. myMap
------------------------------------
--
myMap :: (a -> b) -> [a] -> [b]
myMap f [] = []
myMap f (x:xs) = f x : myMap f xs
--
------------------------------------
-- 5. myFilter
------------------------------------
--
myFilter :: (a -> Bool) -> [a] -> [a]
myFilter f [] = []
myFilter f (x:xs) | f x = x : myFilter f xs
		  | otherwise = myFilter f xs
--
------------------------------------
-- 6. fold
------------------------------------
--
myFold :: (a -> b -> a) -> a -> [b] -> a
myFold f accum [] = accum
myFold f accum (x:xs) = myFold f (f accum x) xs
--
------------------------------------
--
-- 3. PARTIAL APPLICATION
--
------------------------------------
--
-- SAME FUNCTIONS AS ABOVE
--
------------------------------------
--
-- 4. LAZY EVALUATION
--
------------------------------------
--
------------------------------------
-- 7. myLoop
------------------------------------
--
myLoop :: a
myLoop = myLoop
--
------------------------------------
-- 8. myFrom
------------------------------------
--
myFrom :: Int -> [Int]
myFrom n = n : myFrom (n+1)
--
------------------------------------
-- 9. myNotDiv
------------------------------------
--
myNotDiv :: Int -> Int -> Bool
myNotDiv x y | mod y x > 0 = True
	     | otherwise = False
--
------------------------------------
-- 10. mySieve
------------------------------------
--
mySieve :: [Int] -> [Int]
mySieve (x:xs) = (x : myFilter (myNotDiv x) (mySieve xs) )
--
------------------------------------
-- 11. myPrimes
------------------------------------
--
myPrimes :: [Int]
myPrimes = mySieve (myFrom 2)
--
--
------------------------------------
--
-- SESSION
--
------------------------------------
--
------------------------------------
-- 1. POLYMORPHISM
------------------------------------
--
--myFst 3 True
--myFst True 3
--
--myTake 3 [1,3,5,7,9]
--myTake 3 [true, false, true, false, false]
--myTake 1 [1,3,5,7,9]
--myTake 0 [1,3,5,7,9]
--myTake 10 [1,3,5,7,9]
--
------------------------------------
-- 2. HIGHER ORDER FUNCTIONS
------------------------------------
--
--myMap (+1) [1,2,3]
--myFilter (>3) [1,5,2,7]
--myFold (+) 0 [1,2,3,4]
--
------------------------------------
-- 3. PARTIAL APPLICATION
------------------------------------
--
--myMap (+1) [1,2,3]
--myMapmap (+2) [1,2,3]
--myFilter (>5) [1,5,2,7]
--myFilter (==4) [1,5,4,2,7,4]
--
------------------------------------
-- 4. LAZY EVALUATION
------------------------------------
--
--myLoop
--mySnd myLoop 3
--myFrom 1
--myTake 5 (myFrom 1)
--myTake 10 myPrimes
--

